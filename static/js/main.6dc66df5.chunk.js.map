{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","API/index.js","components/Chart/Chart.jsx","components/CountryPickers/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPickers/CountryPicker.module.css","img/image.png"],"names":["module","exports","Cards","data","confirmed","deaths","lastUpdate","recovered","className","Styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","separator","duration","Date","toDateString","varient","url","fetchData","country","a","changableUrl","Axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setdailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setfetchCoutries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","coronaImage","alt","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,kPCwFpJC,EA9ED,SAAC,GAA4D,IAAD,IAAzDC,KAAQC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,UACtD,OAAKH,EAKH,yBAAKI,UAAWC,IAAOC,WACrB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,UAClC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOY,WAC3E,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,YAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKxB,EAAUyB,MACfC,UAAU,IACVC,SAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACf,IAAIQ,KAAK1B,GAAY2B,gBAExB,kBAACV,EAAA,EAAD,CAAYW,QAAQ,SAApB,wCAMJ,kBAACvB,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOF,YAC3E,kBAACe,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKrB,EAAUsB,MACfC,UAAU,IACVC,SAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACf,IAAIQ,KAAK1B,GAAY2B,gBAExB,kBAACV,EAAA,EAAD,CAAYW,QAAQ,SAApB,wCAMJ,kBAACvB,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOJ,SAC3E,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UAGA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAClB,kBAAC,IAAD,CACEC,MAAO,EACPC,IAAKvB,EAAOwB,MACZC,UAAU,IACVC,SAAU,OAGd,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBACf,IAAIQ,KAAK1B,GAAY2B,gBAExB,kBAACV,EAAA,EAAD,CAAYW,QAAQ,SAApB,2CAlED,c,iCCXLC,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACnBC,EAAcJ,EACfE,IACDE,EAAY,UAAMJ,EAAN,sBAAuBE,IAHd,kBAM8CG,IAAMC,IAAIF,GANxD,2BAMdpC,KAAQC,EANM,EAMNA,UAAWC,EANL,EAMKA,OAAQC,EANb,EAMaA,WAAYC,EANzB,EAMyBA,UANzB,kBAQd,CAAEH,YAAWC,SAAQC,aAAYC,cARnB,kCAUrBmC,QAAQC,IAAR,MAVqB,0DAAH,sDAcTC,EAAc,uCAAG,gCAAAN,EAAA,+EAEHE,IAAMC,IAAN,UAAaN,EAAb,WAFG,uBAElBhC,EAFkB,EAElBA,KAEF0C,EAAe1C,EAAK2C,KAAI,SAACC,GAAD,MAAgB,CAC5C3C,UAAW2C,EAAU3C,UAAU4C,MAC/B3C,OAAQ0C,EAAU1C,OAAO2C,MACzBC,KAAMF,EAAUG,eAPQ,kBAUnBL,GAVmB,gCAY1BH,QAAQC,IAAR,MAZ0B,yDAAH,qDAgBdQ,EAAc,uCAAG,8BAAAb,EAAA,+EAESE,IAAMC,IAAN,UAAaN,EAAb,eAFT,uBAEXiB,EAFW,EAEnBjD,KAAQiD,UAFW,kBAInBA,EAAUN,KAAI,SAACT,GAAD,OAAWA,EAAQgB,SAJd,gCAM1BX,QAAQC,IAAR,MAN0B,yDAAH,qD,iBCkCZW,EA9DD,SAAC,GAAuB,IAArBnD,EAAoB,EAApBA,KAAMkC,EAAc,EAAdA,QACrBK,QAAQC,IAAIN,GADuB,MAEDkB,mBAAS,IAFR,mBAE5BR,EAF4B,KAEjBS,EAFiB,KAInCC,qBAAU,YACM,uCAAG,sBAAAnB,EAAA,kEACfkB,EADe,SACIZ,IADJ,6EAAH,qDAGdc,KACC,IAEH,IAAMC,EAAYZ,EAAUa,OAC1B,kBAAC,OAAD,CACEzD,KAAM,CACJ0D,OAAQd,EAAUD,KAAI,qBAAGG,QACzBa,SAAU,CACR,CACEC,MAAO,WACP5D,KAAM4C,EAAUD,KAAI,qBAAG1C,aACvB4D,YAAa,UACbC,MAAM,GAER,CACEF,MAAO,SACP5D,KAAM4C,EAAUD,KAAI,qBAAGzC,UACvB2D,YAAa,MACbC,MAAM,EACNC,gBAAiB,yBAKvB,KAEJxB,QAAQC,IAAIxC,EAAKC,UAAWD,EAAKI,UAAWJ,EAAKE,QACjD,IAAM8D,EAAWhE,EAAKC,UACpB,kBAAC,MAAD,CACED,KAAM,CACJ0D,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CACR,CACEC,MAAO,SACPG,gBAAiB,CACf,oBACA,oBACA,qBAEF/D,KAAM,CAACA,EAAKC,UAAUyB,MAAO1B,EAAKI,UAAUsB,MAAO1B,EAAKE,OAAOwB,UAIrEuC,QAAS,CACPC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CAAED,SAAS,EAAME,KAAK,oBAAD,OAAsBnC,OAGpD,KACJ,OACE,yBAAK7B,UAAWC,IAAOC,WAAY2B,EAAU8B,EAAWR,I,mCCnC7Cc,EAxBO,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,oBAAyB,EACFnB,mBAAS,IADP,mBACxCoB,EADwC,KACtBC,EADsB,KAU/C,OAPAnB,qBAAU,YACM,uCAAG,sBAAAnB,EAAA,kEACfsC,EADe,SACQzB,IADR,6EAAH,qDAIdO,KACC,CAACkB,IAEF,kBAACC,EAAA,EAAD,CAAarE,UAAWC,IAAOqE,aAC7B,kBAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAKR,EAAoBQ,EAAEC,OAAOtD,SACxE,4BAAQA,MAAM,IAAd,UACC8C,EAAiB7B,KAAI,SAACT,EAAS+C,GAAV,OACpB,4BAAQC,IAAKD,EAAGvD,MAAOQ,GACpBA,S,0BCgBEiD,E,4MA5BbC,MAAQ,CACNpF,KAAM,GACNkC,QAAQ,I,EAQVqC,oB,uCAAsB,WAAOrC,GAAP,eAAAC,EAAA,sEACMF,EAAUC,GADhB,OACdmD,EADc,OAEpB,EAAKC,SAAS,CAAEtF,KAAMqF,EAAanD,QAASA,IAFxB,2C,wPALMD,I,OAApBoD,E,OACNE,KAAKD,SAAS,CAAEtF,KAAMqF,I,qIAQd,IAAD,EACmBE,KAAKH,MAAvBpF,EADD,EACCA,KAAMkC,EADP,EACOA,QAEd,OACE,yBAAK7B,UAAU,aACb,yBAAKA,UAAU,QAAQmF,IAAKC,IAAaC,IAAI,aAC7C,kBAAC,EAAD,CAAM1F,KAAMA,IACZ,kBAAC,EAAD,CAAeuE,oBAAqBgB,KAAKhB,sBACzC,kBAAC,EAAD,CAAOvE,KAAMA,EAAMkC,QAASA,S,GAvBlByD,IAAMC,WCHxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U,mBCR1BpG,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC,mBCDhCD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.6dc66df5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from \"react\";\nimport {\n  Card,\n  Grid,\n  CardContent,\n  Typography,\n} from \"@material-ui/core\";\nimport Styles from \"./Cards.module.css\";\nimport CountUp from \"react-countup\";\nimport cx from 'classnames';\n\nconst Cards = ({ data: { confirmed, deaths, lastUpdate, recovered } }) => {\n  if (!confirmed) {\n    return \"Loading...\";\n  }\n  \n  return (\n    <div className={Styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item component={Card} xs={12} md={3} className={cx(Styles.card, Styles.infected)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={confirmed.value}\n                separator=\",\"\n                duration={2.5}\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography varient=\"body2\">\n              Number of active cases of COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid item component={Card} xs={12} md={3} className={cx(Styles.card, Styles.recovered)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={recovered.value}\n                separator=\",\"\n                duration={2.5}\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography varient=\"body2\">\n              Number of recoveries from COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n\n        <Grid item component={Card} xs={12} md={3} className={cx(Styles.card, Styles.deaths)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                end={deaths.value}\n                separator=\",\"\n                duration={2.5}\n              />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography varient=\"body2\">\n              Number of deaths caused by COVID-19\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import Axios from \"axios\";\n\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  let changableUrl =url;\n  if(country) {\n    changableUrl = `${url}/countries/${country}`\n  }\n  try {\n    const {data: { confirmed, deaths, lastUpdate, recovered }} = await Axios.get(changableUrl);\n    \n    return { confirmed, deaths, lastUpdate, recovered };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchDailyData = async () => {\n  try {\n    const { data } = await Axios.get(`${url}/daily`);\n    \n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }));\n\n    return modifiedData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const {data : {countries}} = await Axios.get(`${url}/countries`);\n    \n    return countries.map((country)=>country.name);\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport { fetchDailyData } from \"../../API\";\n\nimport Styles from \"./Chart.module.css\";\n\nconst Chart = ({ data, country }) => {\n  console.log(country);\n  const [dailyData, setdailyData] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setdailyData(await fetchDailyData());\n    };\n    fetchAPI();\n  }, []);\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [\n          {\n            label: \"Infected\",\n            data: dailyData.map(({ confirmed }) => confirmed),\n            borderColor: \"#3333ff\",\n            fill: true,\n          },\n          {\n            label: \"Deaths\",\n            data: dailyData.map(({ deaths }) => deaths),\n            borderColor: \"red\",\n            fill: true,\n            backgroundColor: \"rgba(255,0,0,0.5)\",\n          },\n        ],\n      }}\n    />\n  ) : null;\n\n  console.log(data.confirmed, data.recovered, data.deaths);\n  const barChart = data.confirmed ? (\n    <Bar\n      data={{\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n        datasets: [\n          {\n            label: \"People\",\n            backgroundColor: [\n              \"rgba(0,0,255,0.5)\",\n              \"rgba(0,255,0,0.5)\",\n              \"rgba(255,0,0,0.5)\",\n            ],\n            data: [data.confirmed.value, data.recovered.value, data.deaths.value],\n          },\n        ],\n      }}\n      options={{\n        legend: { display: false },\n        title: { display: true, text: `Current state in ${country}` },\n      }}\n    />\n  ) : null;\n  return (\n    <div className={Styles.container}>{country ? barChart : lineChart}</div>\n  );\n};\n\nexport default Chart;\n","import React, { useState, useEffect } from \"react\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\nimport { fetchCountries } from \"../../API\";\nimport Styles from \"./CountryPicker.module.css\";\n\nconst CountryPicker = ({handleCountryChange}) => {\n  const [fetchedCountries, setfetchCoutries] = useState([]);\n\n  useEffect(() => {\n    const fetchAPI = async () => {\n      setfetchCoutries(await fetchCountries());\n    };\n\n    fetchAPI();\n  }, [setfetchCoutries]);\n  return (\n    <FormControl className={Styles.formControl}>\n      <NativeSelect defaultValue='' onChange={(e)=>handleCountryChange(e.target.value)}>\n        <option value=\"\">Global</option>\n        {fetchedCountries.map((country, i) => (\n          <option key={i} value={country}>\n            {country}\n          </option>\n        ))}\n      </NativeSelect>\n    </FormControl>\n  );\n};\n\nexport default CountryPicker;\n","import React from \"react\";\n\nimport { Card, Chart, CountryPicker } from \"./components\";\nimport \"./App.modules.css\";\nimport { fetchData } from \"./API\";\nimport coronaImage from '../src/img/image.png';\n\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country:'',\n  };\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n    \n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n  }\n  render() {\n    const { data, country } = this.state;\n   \n    return (\n      <div className=\"container\">\n        <img className=\"image\" src={coronaImage} alt=\"COVID-19\"/>\n        <Card data={data} />\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={data} country={country}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__q_r_C\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}